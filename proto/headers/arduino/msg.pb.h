/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6 at Mon Oct  3 19:24:57 2016. */

#ifndef PB_MSG_PB_H_INCLUDED
#define PB_MSG_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(8) controlMessage_can_payload_t;
typedef struct _controlMessage {
    int32_t can_address;
    pb_size_t can_payload_count;
    controlMessage_can_payload_t can_payload[3];
/* @@protoc_insertion_point(struct:controlMessage) */
} controlMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define controlMessage_init_default              {0, 0, {{0, {0}}, {0, {0}}, {0, {0}}}}
#define controlMessage_init_zero                 {0, 0, {{0, {0}}, {0, {0}}, {0, {0}}}}

/* Field tags (for use in manual encoding/decoding) */
#define controlMessage_can_address_tag           1
#define controlMessage_can_payload_tag           2

/* Struct field encoding specification for nanopb */
extern const pb_field_t controlMessage_fields[3];

/* Maximum encoded size of messages (where known) */
#define controlMessage_size                      41

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MSG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
